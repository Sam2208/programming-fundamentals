{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "kernelspec": {
      "display_name": "Python 3",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.6.2"
    },
    "colab": {
      "name": "python 1 - exercise.ipynb",
      "provenance": [],
      "include_colab_link": true
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Sam2208/programming-fundamentals/blob/master/python%201%20-%20exercise.ipynb%20%3A%3A%20solution\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "fQAGnNSLXS8M",
        "colab_type": "text"
      },
      "source": [
        "# W4 - Python data types assignment"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "HXuDgjfsXS8Q",
        "colab_type": "text"
      },
      "source": [
        "# 1. Print word `python` in reverse order"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "tpkvgcAUXS8R",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        },
        "outputId": "9a40ec1b-402e-43f8-9361-00850084cee9"
      },
      "source": [
        "'python'[::-1]"
      ],
      "execution_count": 1,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "'nohtyp'"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 1
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "fwNSc3ZYXS8U",
        "colab_type": "text"
      },
      "source": [
        "# 2. Define variables `apples` and `oranges` and using `format` method print following string:\n",
        ">I have **7** apples and **5** oranges, therefore I have **12** fruits.`"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Efevz_ZWXS8V",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        },
        "outputId": "e057fff7-8765-4bf9-89c8-7058620898a3"
      },
      "source": [
        "apples = 7\n",
        "oranges = 5\n",
        "sum = apples + oranges\n",
        "\n",
        "print('I have {0} apples and {1} oranges, therefore I have {2} fruits.'.format(apples,oranges,sum))"
      ],
      "execution_count": 143,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "I have 7 apples and 5 oranges, therefore I have 12 fruits.\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "EFcEC0QBXS8X",
        "colab_type": "text"
      },
      "source": [
        "# 3. Convert list of characters (`['a', 'b', 'c', 'd']`) to string (`'abc'`)"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "J2lnXCXBXS8Y",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        },
        "outputId": "b3c7478f-a1e2-4f63-80a9-fde107983bfe"
      },
      "source": [
        "list_ch = ['a','b','c','d']\n",
        "\n",
        "\"\".join(list_ch[0:3])"
      ],
      "execution_count": 29,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "'abc'"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 29
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "guGB5S0RXS8c",
        "colab_type": "text"
      },
      "source": [
        "# 4. Get difference between two lists (e.g. `[1, 2, 3, 4, 8, 12]` and `[1, 4, 8, 2]`)"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "HsDu2r66XS8e",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        },
        "outputId": "2066821e-3acc-42c0-9cd0-068de348563b"
      },
      "source": [
        "list1 = [1, 2, 3, 4, 8, 12]\n",
        "list2 = [1, 4, 8, 12]\n",
        "\n",
        "print(list(set(list1)-set(list2)))"
      ],
      "execution_count": 89,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "[2, 3]\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "A30c2kjgXS8g",
        "colab_type": "text"
      },
      "source": [
        "# 5. Add an item to a tuple\n",
        "```python\n",
        "tuple_numbers = (4, 6, 2, 8, 3, 1) \n",
        "```"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "hI_TQl-hXS8h",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        },
        "outputId": "90728255-1c1a-43d8-ebfa-1829303e0553"
      },
      "source": [
        "tuple_numbers = (4, 6, 2, 8, 3, 1)\n",
        "\n",
        "tuple_numbers = tuple_numbers + (9,)\n",
        "print(tuple_numbers)"
      ],
      "execution_count": 36,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "(4, 6, 2, 8, 3, 1, 9)\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "dpdg_EF7XS8j",
        "colab_type": "text"
      },
      "source": [
        "# 6. Convert a tuple to a string\n",
        "```python\n",
        "input_tuple = ('p', 'y', 't', 'h', 'o', 'n')\n",
        "output_string = 'python'\n",
        "```"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "hX5hlrMtXS8k",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        },
        "outputId": "47b43b19-5107-4864-abff-1bd1817e205c"
      },
      "source": [
        "input_tuple = ('p', 'y', 't', 'h', 'o', 'n')\n",
        "\n",
        "output_string = \"\".join(input_tuple)\n",
        "print(output_string)"
      ],
      "execution_count": 47,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "python\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "kPutAGzuXS8m",
        "colab_type": "text"
      },
      "source": [
        "# 7. Combine two dictionaries into one\n",
        "\n",
        "```python\n",
        "names1 = {'Jack': 25, 'John': 26, 'Emily': 23}\n",
        "names2 = {'Carol': 28, 'Walter': 22}\n",
        "```"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "iDzHBMYCXS8n",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        },
        "outputId": "5afe7d39-16bf-45df-bb63-debe7c3f6a63"
      },
      "source": [
        "names1 = {'Jack': 25, 'John': 26, 'Emily': 23}\n",
        "names2 = {'Carol': 28, 'Walter': 22}\n",
        "\n",
        "names1.update(names2)\n",
        "print(names1)"
      ],
      "execution_count": 79,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "{'Jack': 25, 'John': 26, 'Emily': 23, 'Carol': 28, 'Walter': 22}\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "6UU1xu5RXS8u",
        "colab_type": "text"
      },
      "source": [
        "# 8. Sum all the items in a dictionary\n",
        "```python\n",
        "ice_cream_price = {'Chocolate': 200, 'Strawberry': 188, 'Vanilla': 175, 'Caramel': 180}\n",
        "```"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "c31_c6DyXS8w",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 51
        },
        "outputId": "8fae3709-1a7b-4ad5-ac89-d338b6e79c4e"
      },
      "source": [
        "ice_cream_price = {'Chocolate': 200, 'Strawberry': 188, 'Vanilla': 175, 'Caramel': 180}\n",
        "\n",
        "print(ice_cream_price.values())\n",
        "\n",
        "sum = 0\n",
        "for i in ice_cream_price.values():\n",
        "  sum = sum + i\n",
        "print(sum)"
      ],
      "execution_count": 101,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "dict_values([200, 188, 175, 180])\n",
            "743\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "weAUhFilXS8z",
        "colab_type": "text"
      },
      "source": [
        "# 9. Remove item(s) from set. Can you guess which item will be removed?\n",
        "```python\n",
        "set_numbers = {1, 2, 3, 4, 5}\n",
        "set_letters = {'p', 'y', 't', 'h', 'o', 'n'}\n",
        "```"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "crcHJqwQXS8z",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 51
        },
        "outputId": "5b51abb0-6aee-47de-def0-57ee7ebd4846"
      },
      "source": [
        "set_numbers = {1, 2, 3, 4, 5}\n",
        "set_letters = {'p', 'y', 't', 'h', 'o', 'n'}\n",
        "\n",
        "set_numbers.remove(2)\n",
        "print(set_numbers)\n",
        "set_letters.remove('t')\n",
        "print(set_letters)\n",
        "#is this right?"
      ],
      "execution_count": 125,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "{1, 3, 4, 5}\n",
            "{'h', 'n', 'o', 'p', 'y'}\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "1KjICWErXS82",
        "colab_type": "text"
      },
      "source": [
        "# 10. split list into 3 different variables \n",
        "```python\n",
        "color = [\n",
        "    (\"Black\", \"#000000\", \"rgb(0, 0, 0)\"), \n",
        "    (\"Red\", \"#FF0000\", \"rgb(255, 0, 0)\"), \n",
        "    (\"Yellow\", \"#FFFF00\", \"rgb(255, 255, 0)\")\n",
        "]\n",
        "```"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "2J4TAdUrXS83",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 68
        },
        "outputId": "a7456b77-2b68-4660-b4cb-e571f421462c"
      },
      "source": [
        "color = [\n",
        "    (\"Black\", \"#000000\", \"rgb(0, 0, 0)\"), \n",
        "    (\"Red\", \"#FF0000\", \"rgb(255, 0, 0)\"), \n",
        "    (\"Yellow\", \"#FFFF00\", \"rgb(255, 255, 0)\")\n",
        "]\n",
        "\n",
        "x = color[0]\n",
        "y = color[1]\n",
        "z = color[2]\n",
        "print(x)\n",
        "print(y)\n",
        "print(z)"
      ],
      "execution_count": 141,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "('Black', '#000000', 'rgb(0, 0, 0)')\n",
            "('Red', '#FF0000', 'rgb(255, 0, 0)')\n",
            "('Yellow', '#FFFF00', 'rgb(255, 255, 0)')\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "HEsDeg3pXS85",
        "colab_type": "text"
      },
      "source": [
        "# BONUS: test whether every element of first set is in second set and vice versa using using relational operators\n",
        "```python\n",
        "set_a = set(['Chocolate', 'Strawberry', 'Vanilla', 'Caramel'])\n",
        "set_b = set(['Vanilla', 'Caramel','Chocolate', 'Strawberry'])\n",
        "set_c = set(['Chocolate'])\n",
        "```"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Tqki_sjpXS86",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 119
        },
        "outputId": "933b4a57-b8bc-41f1-ce17-b6185ff56be3"
      },
      "source": [
        "set_a = set(['Chocolate', 'Strawberry', 'Vanilla', 'Caramel'])\n",
        "set_b = set(['Vanilla', 'Caramel','Chocolate', 'Strawberry'])\n",
        "set_c = set(['Chocolate'])\n",
        "\n",
        "print(set_a - set_b)\n",
        "print(set_b - set_a)\n",
        "print(set_a - set_c)\n",
        "print(set_c - set_a)\n",
        "print(set_b - set_c)\n",
        "print(set_c - set_b)"
      ],
      "execution_count": 134,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "set()\n",
            "set()\n",
            "{'Strawberry', 'Vanilla', 'Caramel'}\n",
            "set()\n",
            "{'Strawberry', 'Vanilla', 'Caramel'}\n",
            "set()\n"
          ],
          "name": "stdout"
        }
      ]
    }
  ]
}